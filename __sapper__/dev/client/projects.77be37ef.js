import { J as axios, A as api_1, B as api_2, Z as writable } from './client.71a9cd32.js';

// import

// Function, that'll handle process of
// creation of projects list store.
function createProjectsListStore() {
  // Default store values
  let store = {
    loaded: false,

    list: []
  };

  // We need to get some useful "components"
  const { set, update, subscribe } = writable(store);

  // And here we'll return our store
  // functions and so on
  return {
    subscribe,
  
    // @function loadProjects(token)
    // @description This function accepts
    // one argument - user token.
    loadProjects: (token) => {
      // Now we need to make request to internal API
      axios.get(`${api_1}/${api_2}/account/${token}/applications`)
      .then((response) => {
        let data = response.data;

        if (data.length >= 1) {
          // And now we need to update this store
          // with new data...
          update((object) => {
            object.loaded = true;
            object.list = data;

            return object;
          });
        }      }).catch(() => {
        // Here we'll just return empty store object.
        update(() => {
          return store;
        });
      });
    }
  };
}
// Here we'll create new Projects List
// store
const list = createProjectsListStore();


// Function, that'll handle process of creation
// of Current Project store.
function createCurrentStore() {
  // Initial store object
  let store = {
    loaded: false,

    appId: null,

    branding: {
      name: null,
      logotype: null
    }
  };

  // Here we'll get some useful things...
  const { set, update, subscribe } = writable(store);

  // And now we need to return store
  return {
    subscribe,

    // loadProject
    // Loads project with specified id
    loadProject: (appId) => {
      axios.get(`${api_1}/application/${appId}`)
      .then((response) => {
        let data = response.data;

        update((object) => {
          object.loaded            = true;
          // AppId
          object.appId             = appId;

          // Branding
            // Name
          object.branding.name     = data.name,
            // Logotype
          object.branding.logotype = data.logotype;

          return object;
        });
      }).catch((error) => {
        let data = error.response.data || {};

        if (data.error != "NotFound") {
          current.loadProject(appId);
        } else {
          update((object) => {
            object.loaded = true;

            return object;
          });
        }
      });
    }
  }
}
// now we need to create Current Project store
const current = createCurrentStore();

export { current as c, list as l };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdHMuNzdiZTM3ZWYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25maWcvc3RvcmVzL3Byb2plY3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydFxyXG5pbXBvcnQgeyByZWFkYWJsZSwgd3JpdGFibGUgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcblxyXG5pbXBvcnQgeyB1cmwgYXMgYXBpLCB2ZXJzaW9uIH0gZnJvbSBcIi4uL2FwcGxpY2F0aW9uL2FwaVwiO1xyXG5cclxuLy8gRnVuY3Rpb24sIHRoYXQnbGwgaGFuZGxlIHByb2Nlc3Mgb2ZcclxuLy8gY3JlYXRpb24gb2YgcHJvamVjdHMgbGlzdCBzdG9yZS5cclxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdHNMaXN0U3RvcmUoKSB7XHJcbiAgLy8gRGVmYXVsdCBzdG9yZSB2YWx1ZXNcclxuICBsZXQgc3RvcmUgPSB7XHJcbiAgICBsb2FkZWQ6IGZhbHNlLFxyXG5cclxuICAgIGxpc3Q6IFtdXHJcbiAgfTtcclxuXHJcbiAgLy8gV2UgbmVlZCB0byBnZXQgc29tZSB1c2VmdWwgXCJjb21wb25lbnRzXCJcclxuICBjb25zdCB7IHNldCwgdXBkYXRlLCBzdWJzY3JpYmUgfSA9IHdyaXRhYmxlKHN0b3JlKTtcclxuXHJcbiAgLy8gQW5kIGhlcmUgd2UnbGwgcmV0dXJuIG91ciBzdG9yZVxyXG4gIC8vIGZ1bmN0aW9ucyBhbmQgc28gb25cclxuICByZXR1cm4ge1xyXG4gICAgc3Vic2NyaWJlLFxyXG4gIFxyXG4gICAgLy8gQGZ1bmN0aW9uIGxvYWRQcm9qZWN0cyh0b2tlbilcclxuICAgIC8vIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHNcclxuICAgIC8vIG9uZSBhcmd1bWVudCAtIHVzZXIgdG9rZW4uXHJcbiAgICBsb2FkUHJvamVjdHM6ICh0b2tlbikgPT4ge1xyXG4gICAgICAvLyBOb3cgd2UgbmVlZCB0byBtYWtlIHJlcXVlc3QgdG8gaW50ZXJuYWwgQVBJXHJcbiAgICAgIGF4aW9zLmdldChgJHthcGl9LyR7dmVyc2lvbn0vYWNjb3VudC8ke3Rva2VufS9hcHBsaWNhdGlvbnNgKVxyXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICAvLyBBbmQgbm93IHdlIG5lZWQgdG8gdXBkYXRlIHRoaXMgc3RvcmVcclxuICAgICAgICAgIC8vIHdpdGggbmV3IGRhdGEuLi5cclxuICAgICAgICAgIHVwZGF0ZSgob2JqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIG9iamVjdC5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBvYmplY3QubGlzdCA9IGRhdGE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgIC8vIEhlcmUgd2UnbGwganVzdCByZXR1cm4gZW1wdHkgc3RvcmUgb2JqZWN0LlxyXG4gICAgICAgIHVwZGF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gc3RvcmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG4vLyBIZXJlIHdlJ2xsIGNyZWF0ZSBuZXcgUHJvamVjdHMgTGlzdFxyXG4vLyBzdG9yZVxyXG5jb25zdCBsaXN0ID0gY3JlYXRlUHJvamVjdHNMaXN0U3RvcmUoKTtcclxuXHJcbi8vIEFuZCBub3cgd2UgbmVlZCB0byBleHBvcnQgdGhpcyBzdG9yZS5cclxuZXhwb3J0IHsgbGlzdCB9O1xyXG5cclxuXHJcbi8vIEZ1bmN0aW9uLCB0aGF0J2xsIGhhbmRsZSBwcm9jZXNzIG9mIGNyZWF0aW9uXHJcbi8vIG9mIEN1cnJlbnQgUHJvamVjdCBzdG9yZS5cclxuZnVuY3Rpb24gY3JlYXRlQ3VycmVudFN0b3JlKCkge1xyXG4gIC8vIEluaXRpYWwgc3RvcmUgb2JqZWN0XHJcbiAgbGV0IHN0b3JlID0ge1xyXG4gICAgbG9hZGVkOiBmYWxzZSxcclxuXHJcbiAgICBhcHBJZDogbnVsbCxcclxuXHJcbiAgICBicmFuZGluZzoge1xyXG4gICAgICBuYW1lOiBudWxsLFxyXG4gICAgICBsb2dvdHlwZTogbnVsbFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIEhlcmUgd2UnbGwgZ2V0IHNvbWUgdXNlZnVsIHRoaW5ncy4uLlxyXG4gIGNvbnN0IHsgc2V0LCB1cGRhdGUsIHN1YnNjcmliZSB9ID0gd3JpdGFibGUoc3RvcmUpO1xyXG5cclxuICAvLyBBbmQgbm93IHdlIG5lZWQgdG8gcmV0dXJuIHN0b3JlXHJcbiAgcmV0dXJuIHtcclxuICAgIHN1YnNjcmliZSxcclxuXHJcbiAgICAvLyBsb2FkUHJvamVjdFxyXG4gICAgLy8gTG9hZHMgcHJvamVjdCB3aXRoIHNwZWNpZmllZCBpZFxyXG4gICAgbG9hZFByb2plY3Q6IChhcHBJZCkgPT4ge1xyXG4gICAgICBheGlvcy5nZXQoYCR7YXBpfS9hcHBsaWNhdGlvbi8ke2FwcElkfWApXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGxldCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcbiAgICAgICAgdXBkYXRlKChvYmplY3QpID0+IHtcclxuICAgICAgICAgIG9iamVjdC5sb2FkZWQgICAgICAgICAgICA9IHRydWU7XHJcbiAgICAgICAgICAvLyBBcHBJZFxyXG4gICAgICAgICAgb2JqZWN0LmFwcElkICAgICAgICAgICAgID0gYXBwSWQ7XHJcblxyXG4gICAgICAgICAgLy8gQnJhbmRpbmdcclxuICAgICAgICAgICAgLy8gTmFtZVxyXG4gICAgICAgICAgb2JqZWN0LmJyYW5kaW5nLm5hbWUgICAgID0gZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICAvLyBMb2dvdHlwZVxyXG4gICAgICAgICAgb2JqZWN0LmJyYW5kaW5nLmxvZ290eXBlID0gZGF0YS5sb2dvdHlwZTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICBsZXQgZGF0YSA9IGVycm9yLnJlc3BvbnNlLmRhdGEgfHwge307XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmVycm9yICE9IFwiTm90Rm91bmRcIikge1xyXG4gICAgICAgICAgY3VycmVudC5sb2FkUHJvamVjdChhcHBJZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHVwZGF0ZSgob2JqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIG9iamVjdC5sb2FkZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8vIG5vdyB3ZSBuZWVkIHRvIGNyZWF0ZSBDdXJyZW50IFByb2plY3Qgc3RvcmVcclxuY29uc3QgY3VycmVudCA9IGNyZWF0ZUN1cnJlbnRTdG9yZSgpO1xyXG5cclxuLy8gTGV0J3MgZXhwb3J0IHRoaXMgc3RvcmVcclxuZXhwb3J0IHsgY3VycmVudCB9OyJdLCJuYW1lcyI6WyJhcGkiLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx1QkFBdUIsR0FBRztBQUNuQztBQUNBLEVBQUUsSUFBSSxLQUFLLEdBQUc7QUFDZCxJQUFJLE1BQU0sRUFBRSxLQUFLO0FBQ2pCO0FBQ0EsSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUNaLEdBQUcsQ0FBQztBQUNKO0FBQ0E7QUFDQSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztB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
