import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, O as validate_each_argument, v as validate_slots, e as element, a as space, t as text, b as claim_element, h as children, g as claim_space, j as claim_text, f as detach_dev, l as attr_dev, m as add_location, n as set_style, p as insert_dev, o as append_dev, c as create_component, k as claim_component, r as mount_component, u as transition_in, w as transition_out, V as destroy_each, x as destroy_component, R as RoundedButton, D as validate_store, E as component_subscribe, G as stores$1, F as Cookie, H as onMount, I as goto, X as fade, C as Spinner, M as user, Y as create_out_transition, U as check_outros, P as listen_dev, K as set_data_dev, Q as group_outros, y as noop, W as empty } from './client.71a9cd32.js';
import './global.086fc0a6.js';
import { U as UserDropdown, W as WordAvatar } from './UserDropdown.3644fef4.js';
import { l as list } from './projects.77be37ef.js';

/* src/components/Layout/Headers/PanelHeader.svelte generated by Svelte v3.22.2 */
const file = "src/components/Layout/Headers/PanelHeader.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (46:8) { #if p.id == page }
function create_if_block(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "height", "2px");
			set_style(div, "border-bottom", "2px solid #4299e1");
			attr_dev(div, "class", "absolute inset-x-0 bottom-0");
			add_location(div, file, 46, 10, 1242);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(46:8) { #if p.id == page }",
		ctx
	});

	return block;
}

// (35:4) {#each pages as p}
function create_each_block(ctx) {
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let h1;
	let t1_value = /*p*/ ctx[2].name + "";
	let t1;
	let t2;
	let p;
	let t3_value = /*p*/ ctx[2].description + "";
	let t3;
	let t4;
	let t5;
	let if_block = /*p*/ ctx[2].id == /*page*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text(t3_value);
			t4 = space();
			if (if_block) if_block.c();
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			t5 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*p*/ ctx[2].icon)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "" + (/*p*/ ctx[2].id + " icon"));
			add_location(img, file, 37, 8, 956);
			attr_dev(h1, "class", "text-base text-semibold");
			add_location(h1, file, 41, 10, 1069);
			attr_dev(p, "class", "text-xs text-gray-700");
			add_location(p, file, 42, 10, 1130);
			attr_dev(div0, "class", "text-left ml-4");
			add_location(div0, file, 40, 8, 1029);
			set_style(div1, "cursor", "pointer");
			attr_dev(div1, "class", "px-4 py-2 hover:bg-gray-200 flex rounded-lg relative");
			add_location(div1, file, 35, 6, 832);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			append_dev(div0, t2);
			append_dev(div0, p);
			append_dev(p, t3);
			append_dev(div1, t4);
			if (if_block) if_block.m(div1, null);
			append_dev(div1, t5);
		},
		p: function update(ctx, dirty) {
			if (/*p*/ ctx[2].id == /*page*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, t5);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(35:4) {#each pages as p}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	let each_value = /*pages*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const userdropdown = new UserDropdown({ $$inline: true });

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div1 = element("div");
			create_component(userdropdown.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(userdropdown.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "px-6");
			add_location(div0, file, 33, 2, 782);
			attr_dev(div1, "class", "");
			add_location(div1, file, 53, 2, 1435);
			attr_dev(div2, "class", "bg-white w-full absolute inset-x-0 top-0 flex justify-between items-center py-2");
			add_location(div2, file, 31, 0, 658);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div2, t);
			append_dev(div2, div1);
			mount_component(userdropdown, div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*pages, page*/ 3) {
				each_value = /*pages*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(userdropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(userdropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			destroy_component(userdropdown);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let pages = [
		{
			// Page id
			id: "projects",
			// Page name and description
			name: "Приложения",
			description: "Список всех приложений",
			// Page logotype
			icon: "./icons/layers.svg"
		}
	];

	let { page = "projects" } = $$props;
	const writable_props = ["page"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PanelHeader> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PanelHeader", $$slots, []);

	$$self.$set = $$props => {
		if ("page" in $$props) $$invalidate(0, page = $$props.page);
	};

	$$self.$capture_state = () => ({ UserDropdown, pages, page });

	$$self.$inject_state = $$props => {
		if ("pages" in $$props) $$invalidate(1, pages = $$props.pages);
		if ("page" in $$props) $$invalidate(0, page = $$props.page);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [page, pages];
}

class PanelHeader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { page: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PanelHeader",
			options,
			id: create_fragment.name
		});
	}

	get page() {
		throw new Error("<PanelHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set page(value) {
		throw new Error("<PanelHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/panel/projects.svelte generated by Svelte v3.22.2 */
const file$1 = "src/routes/panel/projects.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (78:0) { #if !loaded }
function create_if_block_1(ctx) {
	let div;
	let div_outro;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "height", "100vh");
			set_style(div, "z-index", "2");
			attr_dev(div, "class", "absolute bg-white inset-x-0 top-0 w-full flex justify-center items-center");
			add_location(div, file$1, 78, 2, 2266);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			if (div_outro) div_outro.end(1);
			current = true;
		},
		o: function outro(local) {
			div_outro = create_out_transition(div, fade, {});
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_outro) div_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(78:0) { #if !loaded }",
		ctx
	});

	return block;
}

// (94:8) <RoundedButton classes="text-base">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Создайте новое");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Создайте новое");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(94:8) <RoundedButton classes=\\\"text-base\\\">",
		ctx
	});

	return block;
}

// (113:6) { :else }
function create_else_block(ctx) {
	let current;
	const spinner = new Spinner({ $$inline: true });

	const block = {
		c: function create() {
			create_component(spinner.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(spinner.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(spinner, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(113:6) { :else }",
		ctx
	});

	return block;
}

// (99:6) { #if $list.loaded }
function create_if_block$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*$list*/ ctx[1].list;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*chooseApplication, $list*/ 10) {
				each_value = /*$list*/ ctx[1].list;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(99:6) { #if $list.loaded }",
		ctx
	});

	return block;
}

// (101:8) {#each $list.list as project}
function create_each_block$1(ctx) {
	let div1;
	let div0;
	let t0;
	let p;
	let t1_value = /*project*/ ctx[8].name.slice(0, 13) + "";
	let t1;

	let t2_value = (/*project*/ ctx[8].name.split("").length > 13
	? "..."
	: "") + "";

	let t2;
	let t3;
	let current;
	let dispose;

	const wordavatar = new WordAvatar({
			props: {
				size: "3.5",
				word: /*project*/ ctx[8].name
			},
			$$inline: true
		});

	function click_handler(...args) {
		return /*click_handler*/ ctx[7](/*project*/ ctx[8], ...args);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(wordavatar.$$.fragment);
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = text(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(wordavatar.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "w-32 h-32 rounded-lg bg-gray-200 flex justify-center items-center");
			add_location(div0, file$1, 105, 12, 3413);
			attr_dev(p, "class", "text-gray-700 w-full text-center mt-2");
			add_location(p, file$1, 109, 12, 3626);
			set_style(div1, "cursor", "pointer");
			attr_dev(div1, "class", "mx-4 my-2");
			add_location(div1, file$1, 101, 10, 3242);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(wordavatar, div0, null);
			append_dev(div1, t0);
			append_dev(div1, p);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(div1, t3);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(div1, "click", click_handler, false, false, false);
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const wordavatar_changes = {};
			if (dirty & /*$list*/ 2) wordavatar_changes.word = /*project*/ ctx[8].name;
			wordavatar.$set(wordavatar_changes);
			if ((!current || dirty & /*$list*/ 2) && t1_value !== (t1_value = /*project*/ ctx[8].name.slice(0, 13) + "")) set_data_dev(t1, t1_value);

			if ((!current || dirty & /*$list*/ 2) && t2_value !== (t2_value = (/*project*/ ctx[8].name.split("").length > 13
			? "..."
			: "") + "")) set_data_dev(t2, t2_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(wordavatar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(wordavatar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(wordavatar);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(101:8) {#each $list.list as project}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let div3;
	let t1;
	let div2;
	let div1;
	let div0;
	let h1;
	let t2;
	let t3;
	let p;
	let t4;
	let t5;
	let t6;
	let current_block_type_index;
	let if_block1;
	let current;
	let if_block0 = !/*loaded*/ ctx[0] && create_if_block_1(ctx);

	const header = new PanelHeader({
			props: { page: "projects" },
			$$inline: true
		});

	const roundedbutton = new RoundedButton({
			props: {
				classes: "text-base",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$list*/ ctx[1].loaded) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			div3 = element("div");
			create_component(header.$$.fragment);
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t2 = text("Выберите приложение");
			t3 = space();
			p = element("p");
			t4 = text("или");
			t5 = space();
			create_component(roundedbutton.$$.fragment);
			t6 = space();
			if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { style: true, class: true });
			var div3_nodes = children(div3);
			claim_component(header.$$.fragment, div3_nodes);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Выберите приложение");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "или");
			p_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			claim_component(roundedbutton.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "text-xl text-bold");
			add_location(h1, file$1, 91, 8, 2912);
			attr_dev(p, "class", "mx-6");
			add_location(p, file$1, 92, 8, 2976);
			attr_dev(div0, "class", "absolute inset-x-0 top-0 w-full pt-6 flex justify-center items-center");
			add_location(div0, file$1, 89, 6, 2794);
			attr_dev(div1, "class", "relative w-full h-full flex justify-center items-center rounded-lg shadow-xl bg-white px-4 flex flex-wrap");
			add_location(div1, file$1, 87, 4, 2613);
			attr_dev(div2, "class", "w-full h-full pt-24 pb-6 px-4 md:px-16 lg:px-32");
			add_location(div2, file$1, 86, 2, 2546);
			set_style(div3, "height", "100vh");
			attr_dev(div3, "class", "w-full relative bg-gray-200");
			add_location(div3, file$1, 82, 0, 2420);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			mount_component(header, div3, null);
			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t2);
			append_dev(div0, t3);
			append_dev(div0, p);
			append_dev(p, t4);
			append_dev(div0, t5);
			mount_component(roundedbutton, div0, null);
			append_dev(div1, t6);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!/*loaded*/ ctx[0]) {
				if (if_block0) {
					if (dirty & /*loaded*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const roundedbutton_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				roundedbutton_changes.$$scope = { dirty, ctx };
			}

			roundedbutton.$set(roundedbutton_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div1, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(header.$$.fragment, local);
			transition_in(roundedbutton.$$.fragment, local);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(header.$$.fragment, local);
			transition_out(roundedbutton.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
			destroy_component(header);
			destroy_component(roundedbutton);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $user;
	let $page;
	let $list;
	validate_store(user, "user");
	component_subscribe($$self, user, $$value => $$invalidate(4, $user = $$value));
	validate_store(list, "list");
	component_subscribe($$self, list, $$value => $$invalidate(1, $list = $$value));
	const { page } = stores$1();
	validate_store(page, "page");
	component_subscribe($$self, page, value => $$invalidate(5, $page = value));

	// Cookies manager
	const cookies = Cookie();

	let loaded = false;

	// OnMount event
	onMount(() => {
		setTimeout(
			() => {
				$$invalidate(0, loaded = true);
			},
			150
		);

		// And now we need to get list of all
		// user projects.
		// Firstly, we need to check if user is logged
		// in.
		if ($user.current.token != null) {
			// And now we need to load project's list...
			list.loadProjects($user.current.token);
		} else {
			// We don't have any current user token,
			// so let's check if there is any user in
			// current session. 
			if ($user.tokens.length > 1) {
				// Okay, so now we need to redirect user to
				// Account Chooser page
				goto("/chooser?return=panel/projects");
			} else {
				// There are any users in current session,
				// so we need to redirect user to landing page
				goto("/");
			}
		}

		
	});

	// Function, that'll just create some
	// cookies and then redirect user to
	// specific place.
	function chooseApplication(appId) {
		cookies.set("_current_appId", appId);

		// Let's check if we need to return user to
		// some specific url or not
		let returnURL = $page.query.return;

		if (returnURL == null) {
			goto(`/panel/project/${appId}`);
		} else {
			goto(`/panel/project/${appId}/${returnURL}`);
		}
	}

	
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Projects", $$slots, []);

	const click_handler = (project, e) => {
		chooseApplication(project._id);
	};

	$$self.$capture_state = () => ({
		onMount,
		goto,
		Cookie,
		fade,
		Spinner,
		WordAvatar,
		UserDropdown,
		RoundedButton,
		Header: PanelHeader,
		stores: stores$1,
		list,
		user,
		page,
		cookies,
		loaded,
		chooseApplication,
		$user,
		$page,
		$list
	});

	$$self.$inject_state = $$props => {
		if ("loaded" in $$props) $$invalidate(0, loaded = $$props.loaded);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [loaded, $list, page, chooseApplication, $user, $page, cookies, click_handler];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Projects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdHMuNGNhYzMwZTAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0xheW91dC9IZWFkZXJzL1BhbmVsSGVhZGVyLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcGFuZWwvcHJvamVjdHMuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcbiAgLy8gaW1wb3J0XHJcbiAgXHJcbiAgLy8gSW1wb3J0aW5nIGNvbXBvbmVudHNcclxuICBpbXBvcnQgVXNlckRyb3Bkb3duIGZyb20gXCIuLi8uLi9IZWFkZXIvVXNlckRyb3Bkb3duLnN2ZWx0ZVwiO1xyXG5cclxuICAvLyBBbmQgbm93IHdlIG5lZWQgdG8gY3JlYXRlIHBhZ2VzIHZhcmlhYmxlLlxyXG4gIC8vIEl0J2xsIGhlbHAgdXMgZHluYW1pY2FsbHkgYWRkIHBhZ2VzIGFuZFxyXG4gIC8vIHNvIG9uXHJcblxyXG4gIC8vIEBkaXNsYWltZXIgV2UnbGwgbW92ZSB0aGlzIHZhcmlhYmxlIHRvXHJcbiAgLy8gY29uZmlnIGZpbGUgc29vbi5cclxuICBsZXQgcGFnZXMgPSBbXHJcbiAgICB7IFxyXG4gICAgICAvLyBQYWdlIGlkXHJcbiAgICAgIGlkOiBcInByb2plY3RzXCIsXHJcblxyXG4gICAgICAvLyBQYWdlIG5hbWUgYW5kIGRlc2NyaXB0aW9uXHJcbiAgICAgIG5hbWU6IFwi0J/RgNC40LvQvtC20LXQvdC40Y9cIixcclxuICAgICAgZGVzY3JpcHRpb246IFwi0KHQv9C40YHQvtC6INCy0YHQtdGFINC/0YDQuNC70L7QttC10L3QuNC5XCIsXHJcbiAgICBcclxuICAgICAgLy8gUGFnZSBsb2dvdHlwZVxyXG4gICAgICBpY29uOiBcIi4vaWNvbnMvbGF5ZXJzLnN2Z1wiXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgLy8gTGV0J3MgZXhwb3J0IGN1cnJlbnQgcGFnZSB2YXJpYWJsZTtcclxuICBleHBvcnQgbGV0IHBhZ2UgPSBcInByb2plY3RzXCI7XHJcbjwvc2NyaXB0PlxyXG5cclxuPCEtLSBIZWFkZXIgLS0+XHJcbjxkaXYgY2xhc3M9XCJiZy13aGl0ZSB3LWZ1bGwgYWJzb2x1dGUgaW5zZXQteC0wIHRvcC0wIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciBweS0yXCI+XHJcbiAgPCEtLSBTZXJ2aWNlcyBwYW5lbCAtLT5cclxuICA8ZGl2IGNsYXNzPVwicHgtNlwiPlxyXG4gICAgeyNlYWNoIHBhZ2VzIGFzIHB9XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCIgY2xhc3M9XCJweC00IHB5LTIgaG92ZXI6YmctZ3JheS0yMDAgZmxleCByb3VuZGVkLWxnIHJlbGF0aXZlXCI+XHJcbiAgICAgICAgPCEtLSBJY29uIC0tPlxyXG4gICAgICAgIDxpbWcgc3JjPVwie3AuaWNvbn1cIiBhbHQ9XCJ7cC5pZH0gaWNvblwiPlxyXG5cclxuICAgICAgICA8IS0tIFRleHQgLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtbGVmdCBtbC00XCI+XHJcbiAgICAgICAgICA8aDEgY2xhc3M9XCJ0ZXh0LWJhc2UgdGV4dC1zZW1pYm9sZFwiPntwLm5hbWV9PC9oMT5cclxuICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC14cyB0ZXh0LWdyYXktNzAwXCI+e3AuZGVzY3JpcHRpb259PC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICB7ICNpZiBwLmlkID09IHBhZ2UgfVxyXG4gICAgICAgICAgPGRpdiBzdHlsZT1cImhlaWdodDogMnB4OyBib3JkZXItYm90dG9tOiAycHggc29saWQgIzQyOTllMVwiIGNsYXNzPVwiYWJzb2x1dGUgaW5zZXQteC0wIGJvdHRvbS0wXCI+PC9kaXY+XHJcbiAgICAgICAgeyAvaWYgfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIHsvZWFjaH1cclxuICA8L2Rpdj5cclxuXHJcbiAgPCEtLSBVc2VyIGRyb3Bkb3duIHBhbmVsIC0tPlxyXG4gIDxkaXYgY2xhc3M9XCJcIj5cclxuICAgIDxVc2VyRHJvcGRvd24gLz5cclxuICA8L2Rpdj5cclxuPC9kaXY+IiwiPHNjcmlwdD5cclxuICAvLyBpbXBvcnRcclxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG4gIGltcG9ydCB7IGdvdG8gfSBmcm9tIFwiQHNhcHBlci9hcHBcIjtcclxuICBcclxuICBpbXBvcnQgQ29va2llIGZyb20gXCJjb29raWUtdW5pdmVyc2FsXCI7XHJcblxyXG4gIGltcG9ydCB7IGZhZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcclxuXHJcbiAgLy8gSW1wb3J0aW5nIGNvbXBvbmVudHNcclxuICBpbXBvcnQgU3Bpbm5lciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL1NwaW5uZXIuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IFdvcmRBdmF0YXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQXZhdGFyL1dvcmRBdmF0YXIuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IFVzZXJEcm9wZG93biBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9IZWFkZXIvVXNlckRyb3Bkb3duLnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBSb3VuZGVkQnV0dG9uIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0J1dHRvbnMvUm91bmRlZEJ1dHRvbi5zdmVsdGVcIjtcclxuXHJcbiAgaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9MYXlvdXQvSGVhZGVycy9QYW5lbEhlYWRlci5zdmVsdGVcIjtcclxuXHJcbiAgLy8gSGVyZSB3ZSdsbCBpbXBvcnQgc29tZSB1c2VmdWwgc3RvcmVzLi5cclxuICBpbXBvcnQgeyBzdG9yZXMgfSBmcm9tIFwiQHNhcHBlci9hcHBcIjtcclxuICBpbXBvcnQgeyBsaXN0IH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9zdG9yZXMvcHJvamVjdHMuanNcIjtcclxuICBpbXBvcnQgeyB1c2VyIH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9zdG9yZXMvdXNlci5qc1wiO1xyXG5cclxuICAvLyBQYWdlIHN0b3JlXHJcbiAgY29uc3QgeyBwYWdlIH0gPSBzdG9yZXMoKTtcclxuXHJcbiAgLy8gQ29va2llcyBtYW5hZ2VyXHJcbiAgY29uc3QgY29va2llcyA9IENvb2tpZSgpO1xyXG5cclxuICBsZXQgbG9hZGVkID0gZmFsc2U7XHJcblxyXG4gIC8vIE9uTW91bnQgZXZlbnRcclxuICBvbk1vdW50KCgpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBsb2FkZWQgPSB0cnVlO1xyXG4gICAgfSwgMTUwKTtcclxuICAgIC8vIEFuZCBub3cgd2UgbmVlZCB0byBnZXQgbGlzdCBvZiBhbGxcclxuICAgIC8vIHVzZXIgcHJvamVjdHMuXHJcblxyXG4gICAgLy8gRmlyc3RseSwgd2UgbmVlZCB0byBjaGVjayBpZiB1c2VyIGlzIGxvZ2dlZFxyXG4gICAgLy8gaW4uXHJcbiAgICBpZiAoJHVzZXIuY3VycmVudC50b2tlbiAhPSBudWxsKSB7XHJcbiAgICAgIC8vIEFuZCBub3cgd2UgbmVlZCB0byBsb2FkIHByb2plY3QncyBsaXN0Li4uXHJcbiAgICAgIGxpc3QubG9hZFByb2plY3RzKCR1c2VyLmN1cnJlbnQudG9rZW4pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSBhbnkgY3VycmVudCB1c2VyIHRva2VuLFxyXG4gICAgICAvLyBzbyBsZXQncyBjaGVjayBpZiB0aGVyZSBpcyBhbnkgdXNlciBpblxyXG4gICAgICAvLyBjdXJyZW50IHNlc3Npb24uIFxyXG4gICAgICBpZiAoJHVzZXIudG9rZW5zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAvLyBPa2F5LCBzbyBub3cgd2UgbmVlZCB0byByZWRpcmVjdCB1c2VyIHRvXHJcbiAgICAgICAgLy8gQWNjb3VudCBDaG9vc2VyIHBhZ2VcclxuICAgICAgICBnb3RvKCcvY2hvb3Nlcj9yZXR1cm49cGFuZWwvcHJvamVjdHMnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaGVyZSBhcmUgYW55IHVzZXJzIGluIGN1cnJlbnQgc2Vzc2lvbixcclxuICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHJlZGlyZWN0IHVzZXIgdG8gbGFuZGluZyBwYWdlXHJcbiAgICAgICAgZ290bygnLycpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICAvLyBGdW5jdGlvbiwgdGhhdCdsbCBqdXN0IGNyZWF0ZSBzb21lXHJcbiAgLy8gY29va2llcyBhbmQgdGhlbiByZWRpcmVjdCB1c2VyIHRvXHJcbiAgLy8gc3BlY2lmaWMgcGxhY2UuXHJcbiAgZnVuY3Rpb24gY2hvb3NlQXBwbGljYXRpb24oYXBwSWQpIHtcclxuICAgIGNvb2tpZXMuc2V0KCdfY3VycmVudF9hcHBJZCcsIGFwcElkKTtcclxuXHJcbiAgICAvLyBMZXQncyBjaGVjayBpZiB3ZSBuZWVkIHRvIHJldHVybiB1c2VyIHRvXHJcbiAgICAvLyBzb21lIHNwZWNpZmljIHVybCBvciBub3RcclxuICAgIGxldCByZXR1cm5VUkwgPSAkcGFnZS5xdWVyeS5yZXR1cm47XHJcbiAgICBpZiAocmV0dXJuVVJMID09IG51bGwpIHtcclxuICAgICAgZ290byhgL3BhbmVsL3Byb2plY3QvJHthcHBJZH1gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGdvdG8oYC9wYW5lbC9wcm9qZWN0LyR7YXBwSWR9LyR7cmV0dXJuVVJMfWApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG48L3NjcmlwdD5cclxuXHJcbnsgI2lmICFsb2FkZWQgfVxyXG4gIDxkaXYgb3V0OmZhZGUgc3R5bGU9XCJoZWlnaHQ6IDEwMHZoOyB6LWluZGV4OiAyO1wiIGNsYXNzPVwiYWJzb2x1dGUgYmctd2hpdGUgaW5zZXQteC0wIHRvcC0wIHctZnVsbCBmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiPlxyXG4gIDwvZGl2PlxyXG57IC9pZiB9XHJcblxyXG48ZGl2IHN0eWxlPVwiaGVpZ2h0OiAxMDB2aDtcIiBjbGFzcz1cInctZnVsbCByZWxhdGl2ZSBiZy1ncmF5LTIwMFwiPlxyXG4gIDxIZWFkZXIgcGFnZT1cInByb2plY3RzXCIgLz5cclxuXHJcbiAgPCEtLSBQcm9qZWN0cyBsaXN0IC0tPlxyXG4gIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsIHB0LTI0IHBiLTYgcHgtNCBtZDpweC0xNiBsZzpweC0zMlwiPlxyXG4gICAgPGRpdiBjbGFzcz1cInJlbGF0aXZlIHctZnVsbCBoLWZ1bGwgZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgcm91bmRlZC1sZyBzaGFkb3cteGwgYmctd2hpdGUgcHgtNCBmbGV4IGZsZXgtd3JhcFwiPlxyXG4gICAgICA8IS0tIEFuZCBoZXJlIGdvZXMgc29tZSBraW5kIG9mIGEgXCJoZWFkZXJcIiAtLT5cclxuICAgICAgPGRpdiBjbGFzcz1cImFic29sdXRlIGluc2V0LXgtMCB0b3AtMCB3LWZ1bGwgcHQtNiBmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgIDwhLS0gQ2VudGVyIC0tPlxyXG4gICAgICAgIDxoMSBjbGFzcz1cInRleHQteGwgdGV4dC1ib2xkXCI+0JLRi9Cx0LXRgNC40YLQtSDQv9GA0LjQu9C+0LbQtdC90LjQtTwvaDE+XHJcbiAgICAgICAgPHAgY2xhc3M9XCJteC02XCI+0LjQu9C4PC9wPlxyXG4gICAgICAgIDxSb3VuZGVkQnV0dG9uIGNsYXNzZXM9XCJ0ZXh0LWJhc2VcIj5cclxuICAgICAgICAgINCh0L7Qt9C00LDQudGC0LUg0L3QvtCy0L7QtVxyXG4gICAgICAgIDwvUm91bmRlZEJ1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICB7ICNpZiAkbGlzdC5sb2FkZWQgfVxyXG4gICAgICAgIDwhLS0gQW5kIGhlcmUgZ29lcyB0aGUgbGlzdCBpdHNlbGYuLi4gLS0+XHJcbiAgICAgICAgeyNlYWNoICRsaXN0Lmxpc3QgYXMgcHJvamVjdH1cclxuICAgICAgICAgIDxkaXYgb246Y2xpY2s9eyhlKSA9PiB7XHJcbiAgICAgICAgICAgIGNob29zZUFwcGxpY2F0aW9uKHByb2plY3QuX2lkKTtcclxuICAgICAgICAgIH19IHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiIGNsYXNzPVwibXgtNCBteS0yXCI+XHJcbiAgICAgICAgICAgIDwhLS0gTG9nb3R5cGUgLS0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTMyIGgtMzIgcm91bmRlZC1sZyBiZy1ncmF5LTIwMCBmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgIDxXb3JkQXZhdGFyIHNpemU9XCIzLjVcIiB3b3JkPXtwcm9qZWN0Lm5hbWV9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8IS0tIEFwcGxpY2F0aW9uIG5hbWUgLS0+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC1ncmF5LTcwMCB3LWZ1bGwgdGV4dC1jZW50ZXIgbXQtMlwiPntwcm9qZWN0Lm5hbWUuc2xpY2UoMCwgMTMpfXtwcm9qZWN0Lm5hbWUuc3BsaXQoJycpLmxlbmd0aCA+IDEzID8gXCIuLi5cIiA6IFwiXCJ9PC9wPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgey9lYWNofVxyXG4gICAgICB7IDplbHNlIH1cclxuICAgICAgICA8U3Bpbm5lciAvPlxyXG4gICAgICB7IC9pZiB9XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+Il0sIm5hbWVzIjpbInN0b3JlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBeUMrQyxHQUFDLElBQUMsSUFBSTs7OztzQkFDVCxHQUFDLElBQUMsV0FBVzs7OztzQkFHM0MsR0FBQyxJQUFDLEVBQUUsYUFBSSxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MENBUlAsR0FBQyxJQUFDLElBQUk7b0RBQVMsR0FB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
