import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, C as Spinner, v as validate_slots, e as element, c as create_component, a as space, t as text, b as claim_element, h as children, k as claim_component, g as claim_space, j as claim_text, f as detach_dev, n as set_style, l as attr_dev, m as add_location, p as insert_dev, r as mount_component, o as append_dev, K as set_data_dev, u as transition_in, w as transition_out, x as destroy_component, y as noop, L as svg_element, D as validate_store, E as component_subscribe, M as user, J as axios, R as RoundedButton, N as globals, O as validate_each_argument, P as listen_dev, Q as group_outros, U as check_outros, V as destroy_each, W as empty } from './client.71a9cd32.js';
import { a as api, g as general } from './global.086fc0a6.js';

/* src/components/Avatar/WordAvatar.svelte generated by Svelte v3.22.2 */
const file = "src/components/Avatar/WordAvatar.svelte";

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let span;
	let t1_value = /*word*/ ctx[0].split("")[0].toUpperCase() + "";
	let t1;
	let div0_class_value;
	let current;

	const spinner = new Spinner({
			props: { style: "z-index: 0;", size: "25" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(spinner.$$.fragment);
			t0 = space();
			div0 = element("div");
			span = element("span");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			claim_component(spinner.$$.fragment, div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			span = claim_element(div0_nodes, "SPAN", { style: true, class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span, "font-size", /*size*/ ctx[1] / 2 + "em");
			attr_dev(span, "class", "font-semibold text-white");
			add_location(span, file, 25, 4, 763);
			attr_dev(div0, "class", div0_class_value = "absolute rounded-full flex justify-center items-center " + /*colors*/ ctx[2][Math.floor(Math.random() * /*colors*/ ctx[2].length)]);
			set_style(div0, "z-index", "1");
			set_style(div0, "width", /*size*/ ctx[1] + "em");
			set_style(div0, "height", /*size*/ ctx[1] + "em");
			add_location(div0, file, 24, 2, 582);
			attr_dev(div1, "class", "rounded-full flex justify-center items-center relative");
			set_style(div1, "width", /*size*/ ctx[1] + "em");
			set_style(div1, "height", /*size*/ ctx[1] + "em");
			add_location(div1, file, 22, 0, 422);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(spinner, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, span);
			append_dev(span, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*word*/ 1) && t1_value !== (t1_value = /*word*/ ctx[0].split("")[0].toUpperCase() + "")) set_data_dev(t1, t1_value);

			if (!current || dirty & /*size*/ 2) {
				set_style(span, "font-size", /*size*/ ctx[1] / 2 + "em");
			}

			if (!current || dirty & /*size*/ 2) {
				set_style(div0, "width", /*size*/ ctx[1] + "em");
			}

			if (!current || dirty & /*size*/ 2) {
				set_style(div0, "height", /*size*/ ctx[1] + "em");
			}

			if (!current || dirty & /*size*/ 2) {
				set_style(div1, "width", /*size*/ ctx[1] + "em");
			}

			if (!current || dirty & /*size*/ 2) {
				set_style(div1, "height", /*size*/ ctx[1] + "em");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(spinner);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let colors = [
		"bg-blue-500",
		"bg-green-500",
		"bg-indigo-500",
		"bg-orange-500",
		"bg-red-500",
		"bg-yellow-500",
		"bg-teal-500",
		"bg-purple-500",
		"bg-pink-500"
	];

	let { word = "UN" } = $$props;
	let { size = 2.3 } = $$props;
	const writable_props = ["word", "size"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<WordAvatar> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("WordAvatar", $$slots, []);

	$$self.$set = $$props => {
		if ("word" in $$props) $$invalidate(0, word = $$props.word);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
	};

	$$self.$capture_state = () => ({ Spinner, colors, word, size });

	$$self.$inject_state = $$props => {
		if ("colors" in $$props) $$invalidate(2, colors = $$props.colors);
		if ("word" in $$props) $$invalidate(0, word = $$props.word);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [word, size, colors];
}

class WordAvatar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { word: 0, size: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "WordAvatar",
			options,
			id: create_fragment.name
		});
	}

	get word() {
		throw new Error("<WordAvatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set word(value) {
		throw new Error("<WordAvatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<WordAvatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<WordAvatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Avatar/UserAvatar.svelte generated by Svelte v3.22.2 */
const file$1 = "src/components/Avatar/UserAvatar.svelte";

// (27:2) { :else }
function create_else_block(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "absolute rounded-full");
			set_style(div, "z-index", "1");
			set_style(div, "background-image", "url(" + /*avatar*/ ctx[2] + ")");
			set_style(div, "background-size", "cover");
			set_style(div, "background-position", "center center");
			set_style(div, "width", /*size*/ ctx[1] + "em");
			set_style(div, "height", /*size*/ ctx[1] + "em");
			add_location(div, file$1, 27, 4, 914);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*avatar*/ 4) {
				set_style(div, "background-image", "url(" + /*avatar*/ ctx[2] + ")");
			}

			if (dirty & /*size*/ 2) {
				set_style(div, "width", /*size*/ ctx[1] + "em");
			}

			if (dirty & /*size*/ 2) {
				set_style(div, "height", /*size*/ ctx[1] + "em");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(27:2) { :else }",
		ctx
	});

	return block;
}

// (21:2) { #if avatar == null }
function create_if_block(ctx) {
	let div;
	let span;

	let t_value = (/*username*/ ctx[0] == null
	? "UN"
	: /*username*/ ctx[0].split("")[0].toUpperCase()) + "";

	let t;
	let div_class_value;

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { style: true, class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span, "font-size", /*size*/ ctx[1] / 2 + "em");
			attr_dev(span, "class", "font-semibold text-white");
			add_location(span, file$1, 22, 6, 723);
			attr_dev(div, "class", div_class_value = "absolute rounded-full flex justify-center items-center " + /*colors*/ ctx[3][Math.floor(Math.random() * /*colors*/ ctx[3].length)]);
			set_style(div, "z-index", "1");
			set_style(div, "width", /*size*/ ctx[1] + "em");
			set_style(div, "height", /*size*/ ctx[1] + "em");
			add_location(div, file$1, 21, 4, 540);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*username*/ 1 && t_value !== (t_value = (/*username*/ ctx[0] == null
			? "UN"
			: /*username*/ ctx[0].split("")[0].toUpperCase()) + "")) set_data_dev(t, t_value);

			if (dirty & /*size*/ 2) {
				set_style(span, "font-size", /*size*/ ctx[1] / 2 + "em");
			}

			if (dirty & /*size*/ 2) {
				set_style(div, "width", /*size*/ ctx[1] + "em");
			}

			if (dirty & /*size*/ 2) {
				set_style(div, "height", /*size*/ ctx[1] + "em");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(21:2) { #if avatar == null }",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let t;
	let current;

	const spinner = new Spinner({
			props: { style: "z-index: 0;", size: "25" },
			$$inline: true
		});

	function select_block_type(ctx, dirty) {
		if (/*avatar*/ ctx[2] == null) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(spinner.$$.fragment);
			t = space();
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			claim_component(spinner.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "rounded-full flex justify-center items-center relative");
			set_style(div, "width", /*size*/ ctx[1] + "em");
			set_style(div, "height", /*size*/ ctx[1] + "em");
			add_location(div, file$1, 18, 0, 352);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(spinner, div, null);
			append_dev(div, t);
			if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (!current || dirty & /*size*/ 2) {
				set_style(div, "width", /*size*/ ctx[1] + "em");
			}

			if (!current || dirty & /*size*/ 2) {
				set_style(div, "height", /*size*/ ctx[1] + "em");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(spinner);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let colors = ["bg-blue-500", "bg-green-500", "bg-indigo-500", "bg-orange-500"];
	let { username = "UN" } = $$props;
	let { size = 2.3 } = $$props;
	let { avatar = null } = $$props;
	const writable_props = ["username", "size", "avatar"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<UserAvatar> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("UserAvatar", $$slots, []);

	$$self.$set = $$props => {
		if ("username" in $$props) $$invalidate(0, username = $$props.username);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("avatar" in $$props) $$invalidate(2, avatar = $$props.avatar);
	};

	$$self.$capture_state = () => ({ Spinner, colors, username, size, avatar });

	$$self.$inject_state = $$props => {
		if ("colors" in $$props) $$invalidate(3, colors = $$props.colors);
		if ("username" in $$props) $$invalidate(0, username = $$props.username);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("avatar" in $$props) $$invalidate(2, avatar = $$props.avatar);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [username, size, avatar, colors];
}

class UserAvatar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { username: 0, size: 1, avatar: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UserAvatar",
			options,
			id: create_fragment$1.name
		});
	}

	get username() {
		throw new Error("<UserAvatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set username(value) {
		throw new Error("<UserAvatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<UserAvatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<UserAvatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get avatar() {
		throw new Error("<UserAvatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set avatar(value) {
		throw new Error("<UserAvatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/icons/Chevron.svelte generated by Svelte v3.22.2 */

const file$2 = "src/icons/Chevron.svelte";

// (15:34) 
function create_if_block_2(ctx) {
	let svg;
	let polyline;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polyline = svg_element("polyline");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			polyline = claim_element(svg_nodes, "polyline", { points: true }, 1);
			children(polyline).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(polyline, "points", "15 18 9 12 15 6");
			add_location(polyline, file$2, 15, 217, 1077);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", /*color*/ ctx[2]);
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-chevron-left");
			add_location(svg, file$2, 15, 4, 864);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polyline);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*color*/ 4) {
				attr_dev(svg, "stroke", /*color*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(15:34) ",
		ctx
	});

	return block;
}

// (13:34) 
function create_if_block_1(ctx) {
	let svg;
	let polyline;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polyline = svg_element("polyline");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			polyline = claim_element(svg_nodes, "polyline", { points: true }, 1);
			children(polyline).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(polyline, "points", "6 9 12 15 18 9");
			add_location(polyline, file$2, 13, 217, 771);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", /*color*/ ctx[2]);
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-chevron-down");
			add_location(svg, file$2, 13, 4, 558);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polyline);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*color*/ 4) {
				attr_dev(svg, "stroke", /*color*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(13:34) ",
		ctx
	});

	return block;
}

// (11:2) { #if direction == "right" }
function create_if_block$1(ctx) {
	let svg;
	let polyline;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polyline = svg_element("polyline");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			polyline = claim_element(svg_nodes, "polyline", { points: true }, 1);
			children(polyline).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(polyline, "points", "9 18 15 12 9 6");
			add_location(polyline, file$2, 11, 218, 465);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", /*color*/ ctx[2]);
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-chevron-right");
			add_location(svg, file$2, 11, 4, 251);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polyline);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*color*/ 4) {
				attr_dev(svg, "stroke", /*color*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(11:2) { #if direction == \\\"right\\\" }",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let span;

	function select_block_type(ctx, dirty) {
		if (/*direction*/ ctx[0] == "right") return create_if_block$1;
		if (/*direction*/ ctx[0] == "down") return create_if_block_1;
		if (/*direction*/ ctx[0] == "left") return create_if_block_2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			span = element("span");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { style: true });
			var span_nodes = children(span);
			if (if_block) if_block.l(span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span, "width", /*size*/ ctx[1] + "em");
			set_style(span, "height", /*size*/ ctx[1] + "em");
			add_location(span, file$2, 9, 0, 164);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			if (if_block) if_block.m(span, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}

			if (dirty & /*size*/ 2) {
				set_style(span, "width", /*size*/ ctx[1] + "em");
			}

			if (dirty & /*size*/ 2) {
				set_style(span, "height", /*size*/ ctx[1] + "em");
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);

			if (if_block) {
				if_block.d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { direction = "down" } = $$props;
	let { size = "1.5" } = $$props;
	let { color = "currentColor" } = $$props;
	const writable_props = ["direction", "size", "color"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chevron> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Chevron", $$slots, []);

	$$self.$set = $$props => {
		if ("direction" in $$props) $$invalidate(0, direction = $$props.direction);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
	};

	$$self.$capture_state = () => ({ direction, size, color });

	$$self.$inject_state = $$props => {
		if ("direction" in $$props) $$invalidate(0, direction = $$props.direction);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [direction, size, color];
}

class Chevron extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { direction: 0, size: 1, color: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Chevron",
			options,
			id: create_fragment$2.name
		});
	}

	get direction() {
		throw new Error("<Chevron>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Chevron>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Chevron>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Chevron>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Chevron>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Chevron>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Header/UserDropdown.svelte generated by Svelte v3.22.2 */

const { console: console_1 } = globals;

const file$3 = "src/components/Header/UserDropdown.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (60:2) { :else }
function create_else_block$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2$1, create_else_block_2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*$user*/ ctx[2].current.token != null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(60:2) { :else }",
		ctx
	});

	return block;
}

// (58:2) {#if loading}
function create_if_block_1$1(ctx) {
	let current;
	const spinner = new Spinner({ props: { size: "25" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(spinner.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(spinner.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(spinner, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(58:2) {#if loading}",
		ctx
	});

	return block;
}

// (99:4) { :else }
function create_else_block_2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5, create_else_block_3];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (/*$user*/ ctx[2].error == "ChooseAccount") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_3(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(99:4) { :else }",
		ctx
	});

	return block;
}

// (66:4) { #if $user.current.token != null }
function create_if_block_2$1(ctx) {
	let div1;
	let t0;
	let div0;
	let p0;
	let t1_value = /*$user*/ ctx[2].current.username + "";
	let t1;
	let t2;
	let p1;
	let t3_value = /*$user*/ ctx[2].current.email + "";
	let t3;
	let t4;
	let button;
	let current_block_type_index;
	let if_block;
	let current;
	let dispose;

	const useravatar = new UserAvatar({
			props: {
				size: "2.5",
				avatar: /*$user*/ ctx[2].current.avatar,
				username: /*$user*/ ctx[2].current.username
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block_3, create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*showDropdown*/ ctx[0]) return 0;
		if (/*$user*/ ctx[2].profiles.length > 1) return 1;
		return 2;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(useravatar.$$.fragment);
			t0 = space();
			div0 = element("div");
			p0 = element("p");
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			t3 = text(t3_value);
			t4 = space();
			button = element("button");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(useravatar.$$.fragment, div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, t1_value);
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, t3_value);
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			button = claim_element(div1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			if_block.l(button_nodes);
			button_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file$3, 75, 10, 1823);
			attr_dev(p1, "class", "text-sm text-gray-600");
			add_location(p1, file$3, 76, 10, 1866);
			attr_dev(div0, "class", "mx-4");
			add_location(div0, file$3, 74, 8, 1793);
			attr_dev(button, "class", "mx-4 rounded-lg hover:bg-gray-200 p-3 hover:shadow-2xl");
			add_location(button, file$3, 80, 8, 1979);
			attr_dev(div1, "class", "flex items-center");
			add_location(div1, file$3, 70, 6, 1616);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div1, anchor);
			mount_component(useravatar, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, p0);
			append_dev(p0, t1);
			append_dev(div0, t2);
			append_dev(div0, p1);
			append_dev(p1, t3);
			append_dev(div1, t4);
			append_dev(div1, button);
			if_blocks[current_block_type_index].m(button, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(button, "click", /*click_handler*/ ctx[6], false, false, false);
		},
		p: function update(ctx, dirty) {
			const useravatar_changes = {};
			if (dirty & /*$user*/ 4) useravatar_changes.avatar = /*$user*/ ctx[2].current.avatar;
			if (dirty & /*$user*/ 4) useravatar_changes.username = /*$user*/ ctx[2].current.username;
			useravatar.$set(useravatar_changes);
			if ((!current || dirty & /*$user*/ 4) && t1_value !== (t1_value = /*$user*/ ctx[2].current.username + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*$user*/ 4) && t3_value !== (t3_value = /*$user*/ ctx[2].current.email + "")) set_data_dev(t3, t3_value);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(button, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(useravatar.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(useravatar.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(useravatar);
			if_blocks[current_block_type_index].d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(66:4) { #if $user.current.token != null }",
		ctx
	});

	return block;
}

// (109:6) { :else }
function create_else_block_3(ctx) {
	let div;
	let current;

	const roundedbutton = new RoundedButton({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	roundedbutton.$on("click", /*click_handler_1*/ ctx[7]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(roundedbutton.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(roundedbutton.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$3, 109, 8, 2989);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(roundedbutton, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const roundedbutton_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				roundedbutton_changes.$$scope = { dirty, ctx };
			}

			roundedbutton.$set(roundedbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(roundedbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(roundedbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(roundedbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(109:6) { :else }",
		ctx
	});

	return block;
}

// (105:6) { #if $user.error == "ChooseAccount" }
function create_if_block_5(ctx) {
	let div;
	let p;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t = text("Выбрать аккаунт");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Выбрать аккаунт");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$3, 106, 10, 2924);
			add_location(div, file$3, 105, 8, 2907);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(105:6) { #if $user.error == \\\"ChooseAccount\\\" }",
		ctx
	});

	return block;
}

// (111:10) <RoundedButton on:click={(e) => {              login();            }}>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("🔑 Авторизоваться");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "🔑 Авторизоваться");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(111:10) <RoundedButton on:click={(e) => {              login();            }}>",
		ctx
	});

	return block;
}

// (93:12) { :else }
function create_else_block_1(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { style: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			set_style(img, "width", "1.6em");
			set_style(img, "height", "1.6em");
			if (img.src !== (img_src_value = "./icons/user.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "User icon");
			add_location(img, file$3, 93, 14, 2507);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(93:12) { :else }",
		ctx
	});

	return block;
}

// (91:12) { #if $user.profiles.length > 1 }
function create_if_block_4(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { style: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			set_style(img, "width", "1.6em");
			set_style(img, "height", "1.6em");
			if (img.src !== (img_src_value = "./icons/users.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Users icon");
			add_location(img, file$3, 91, 14, 2385);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(91:12) { #if $user.profiles.length > 1 }",
		ctx
	});

	return block;
}

// (88:10) {#if showDropdown}
function create_if_block_3(ctx) {
	let current;

	const chevronicon = new Chevron({
			props: { size: "1.6", direction: "down" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(chevronicon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(chevronicon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(chevronicon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(chevronicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(chevronicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(chevronicon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(88:10) {#if showDropdown}",
		ctx
	});

	return block;
}

// (122:2) { #if showDropdown }
function create_if_block$2(ctx) {
	let div5;
	let div4;
	let h10;
	let t0;
	let t1;
	let div3;
	let t2;
	let div2;
	let div1;
	let img;
	let img_src_value;
	let t3;
	let div0;
	let h11;
	let t4;
	let current;
	let dispose;
	let each_value = /*$user*/ ctx[2].profiles;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div5 = element("div");
			div4 = element("div");
			h10 = element("h1");
			t0 = text("Аккаунты");
			t1 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div2 = element("div");
			div1 = element("div");
			img = element("img");
			t3 = space();
			div0 = element("div");
			h11 = element("h1");
			t4 = text("Добавить аккаунт");
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { style: true, class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h10 = claim_element(div4_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t0 = claim_text(h10_nodes, "Аккаунты");
			h10_nodes.forEach(detach_dev);
			t1 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div3_nodes);
			}

			t2 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true });
			t3 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h11 = claim_element(div0_nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t4 = claim_text(h11_nodes, "Добавить аккаунт");
			h11_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h10, "class", "text-xl font-semibold");
			add_location(h10, file$3, 124, 8, 3410);
			if (img.src !== (img_src_value = "./icons/plus.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Add icon");
			add_location(img, file$3, 149, 14, 4776);
			attr_dev(h11, "class", "text-semibold");
			add_location(h11, file$3, 152, 16, 4887);
			attr_dev(div0, "class", "ml-4");
			add_location(div0, file$3, 151, 14, 4851);
			attr_dev(div1, "class", "flex items-center");
			add_location(div1, file$3, 148, 12, 4729);
			set_style(div2, "cursor", "pointer");
			attr_dev(div2, "class", "my-4 bg-gray-100 hover:bg-gray-300 bg-white w-full flex justify-start py-4 px-4 md:px-8 rounded-lg");
			add_location(div2, file$3, 145, 10, 4443);
			attr_dev(div3, "class", "flex flex-col items-center justify-center mt-2");
			add_location(div3, file$3, 131, 8, 3575);
			attr_dev(div4, "class", "text-center");
			add_location(div4, file$3, 123, 6, 3375);
			set_style(div5, "z-index", "3");
			attr_dev(div5, "class", "absolute right-0 mt-2 mr-6 w-full max-w-md py-6 px-4 bg-white shadow-xl flex flex-col justify-center rounded-lg");
			add_location(div5, file$3, 122, 4, 3222);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div4);
			append_dev(div4, h10);
			append_dev(h10, t0);
			append_dev(div4, t1);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, img);
			append_dev(div1, t3);
			append_dev(div1, div0);
			append_dev(div0, h11);
			append_dev(h11, t4);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(div2, "click", /*click_handler_2*/ ctx[8], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$user*/ 4) {
				each_value = /*$user*/ ctx[2].profiles;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div3, t2);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			destroy_each(each_blocks, detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(122:2) { #if showDropdown }",
		ctx
	});

	return block;
}

// (133:10) {#each $user.profiles as profile}
function create_each_block(ctx) {
	let div2;
	let div1;
	let t0;
	let div0;
	let h1;
	let t1_value = /*profile*/ ctx[9].username.slice(0, 20) + "";
	let t1;

	let t2_value = (/*profile*/ ctx[9].username.split("").length > 20
	? "..."
	: "") + "";

	let t2;
	let t3;
	let p;
	let t4_value = /*profile*/ ctx[9].email + "";
	let t4;
	let div2_class_value;
	let current;

	const useravatar = new UserAvatar({
			props: {
				avatar: /*profile*/ ctx[9].avatar,
				username: /*profile*/ ctx[9].username
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			create_component(useravatar.$$.fragment);
			t0 = space();
			div0 = element("div");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = text(t2_value);
			t3 = space();
			p = element("p");
			t4 = text(t4_value);
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { style: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(useravatar.$$.fragment, div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			t2 = claim_text(h1_nodes, t2_value);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, t4_value);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "text-semibold");
			add_location(h1, file$3, 138, 18, 4157);
			attr_dev(p, "class", "text-xs text-gray-700");
			add_location(p, file$3, 139, 18, 4292);
			attr_dev(div0, "class", "ml-4 text-left");
			add_location(div0, file$3, 137, 16, 4109);
			attr_dev(div1, "class", "flex items-center");
			add_location(div1, file$3, 134, 14, 3958);
			set_style(div2, "cursor", "pointer");

			attr_dev(div2, "class", div2_class_value = "my-1 hover:bg-gray-200 " + (/*$user*/ ctx[2].current.token == /*profile*/ ctx[9].token
			? "bg-gray-200 border-solid border-blue-600 border-2"
			: "bg-white") + " border-solid border-white border-2 w-full flex justify-start py-4 px-4 rounded-lg");

			add_location(div2, file$3, 133, 12, 3694);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			mount_component(useravatar, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			append_dev(h1, t2);
			append_dev(div0, t3);
			append_dev(div0, p);
			append_dev(p, t4);
			current = true;
		},
		p: function update(ctx, dirty) {
			const useravatar_changes = {};
			if (dirty & /*$user*/ 4) useravatar_changes.avatar = /*profile*/ ctx[9].avatar;
			if (dirty & /*$user*/ 4) useravatar_changes.username = /*profile*/ ctx[9].username;
			useravatar.$set(useravatar_changes);
			if ((!current || dirty & /*$user*/ 4) && t1_value !== (t1_value = /*profile*/ ctx[9].username.slice(0, 20) + "")) set_data_dev(t1, t1_value);

			if ((!current || dirty & /*$user*/ 4) && t2_value !== (t2_value = (/*profile*/ ctx[9].username.split("").length > 20
			? "..."
			: "") + "")) set_data_dev(t2, t2_value);

			if ((!current || dirty & /*$user*/ 4) && t4_value !== (t4_value = /*profile*/ ctx[9].email + "")) set_data_dev(t4, t4_value);

			if (!current || dirty & /*$user*/ 4 && div2_class_value !== (div2_class_value = "my-1 hover:bg-gray-200 " + (/*$user*/ ctx[2].current.token == /*profile*/ ctx[9].token
			? "bg-gray-200 border-solid border-blue-600 border-2"
			: "bg-white") + " border-solid border-white border-2 w-full flex justify-start py-4 px-4 rounded-lg")) {
				attr_dev(div2, "class", div2_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(useravatar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(useravatar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(useravatar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(133:10) {#each $user.profiles as profile}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*loading*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*showDropdown*/ ctx[0] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block0.l(div_nodes);
			t = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "relative");
			add_location(div, file$3, 51, 0, 1198);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(div, t);
			}

			if (/*showDropdown*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*showDropdown*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let $api;
	let $general;
	let $user;
	validate_store(api, "api");
	component_subscribe($$self, api, $$value => $$invalidate(4, $api = $$value));
	validate_store(general, "general");
	component_subscribe($$self, general, $$value => $$invalidate(5, $general = $$value));
	validate_store(user, "user");
	component_subscribe($$self, user, $$value => $$invalidate(2, $user = $$value));
	let showDropdown = false;

	// Loading indicator
	let loading = true;

	// Let's subscribe to user store and
	// check if it's loaded.
	user.subscribe(value => {
		if (value.loaded) {
			$$invalidate(1, loading = false);
		}
	});

	// login
	// This function will try to login
	// this user.
	function login() {
		$$invalidate(1, loading = true);

		// 6HqdAABLbMNV
		axios.post(`${$api.url}/callback`, { url: `${$general.url}` }).then(response => {
			let data = response.data;

			if (data.url != null) {
				window.location.href = data.url;
			}
		}).catch(error => {
			console.log("ERROR");
			console.log(error);
		});
	}

	
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<UserDropdown> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("UserDropdown", $$slots, []);

	const click_handler = e => {
		if (showDropdown) {
			$$invalidate(0, showDropdown = false);
		} else {
			$$invalidate(0, showDropdown = true);
		}
	};

	const click_handler_1 = e => {
		login();
	};

	const click_handler_2 = e => {
		window.location.href = `https://account.wavees.co.vu/authorize/add?return=@wavees.co.vu`;
	};

	$$self.$capture_state = () => ({
		api,
		general,
		user,
		axios,
		Spinner,
		UserAvatar,
		RoundedButton,
		ChevronIcon: Chevron,
		showDropdown,
		loading,
		login,
		$api,
		$general,
		$user
	});

	$$self.$inject_state = $$props => {
		if ("showDropdown" in $$props) $$invalidate(0, showDropdown = $$props.showDropdown);
		if ("loading" in $$props) $$invalidate(1, loading = $$props.loading);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		showDropdown,
		loading,
		$user,
		login,
		$api,
		$general,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class UserDropdown extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UserDropdown",
			options,
			id: create_fragment$3.name
		});
	}
}

export { UserDropdown as U, WordAvatar as W };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
